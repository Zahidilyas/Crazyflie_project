#!/usr/bin/env python

import math
import rospy
import tf2_ros
import tf2_geometry_msgs
import time
from tf.transformations import euler_from_quaternion
from geometry_msgs.msg import PoseStamped
from crazyflie_driver.msg import Position

# Current goal_loc (global state)
goal_loc = None

# def goal_loc_callback(msg):
#     global goal_loc

#     # RViz's "2D Nav goal_loc" publishes z=0, so add some altitude if needed.
#     if msg.pose.position.z == 0.0:
#         msg.pose.position.z = 0.4

#     rospy.loginfo('New goal_loc set:\n%s', msg)
#     # print(msg)
#     goal_loc = msg

def publish_cmd(goal_loc):
    # Need to tell TF that the goal_loc was just generated
    goal_loc.header.stamp = rospy.Time.now()

    if not tf_buf.can_transform(goal_loc.header.frame_id, 'cf1/odom', goal_loc.header.stamp):
        rospy.logwarn_throttle(5.0, 'No transform from %s to cf1/odom' % goal_loc.header.frame_id)
        return

    goal_loc_odom = tf_buf.transform(goal_loc, 'cf1/odom')

    cmd = Position()

    cmd.header.stamp = rospy.Time.now()
    cmd.header.frame_id = goal_loc_odom.header.frame_id

    cmd.x = goal_loc_odom.pose.position.x
    cmd.y = goal_loc_odom.pose.position.y
    cmd.z = goal_loc_odom.pose.position.z

    roll, pitch, yaw = euler_from_quaternion((goal_loc_odom.pose.orientation.x,
                                              goal_loc_odom.pose.orientation.y,
                                              goal_loc_odom.pose.orientation.z,
                                              goal_loc_odom.pose.orientation.w))

    cmd.yaw = math.degrees(yaw)

    pub_cmd.publish(cmd)


rospy.init_node('navgoal_loc3')
# sub_goal_loc = rospy.Subscriber('/move_base_simple/goal_loc', PoseStamped, goal_loc_callback)
pub_cmd  = rospy.Publisher('/cf1/cmd_position', Position, queue_size=2)
tf_buf   = tf2_ros.Buffer()
tf_lstn  = tf2_ros.TransformListener(tf_buf)

def main():
    rate = rospy.Rate(10)  # Hz

    # goal_loc = PoseStamped()
    # goal_loc.header.frame_id = 'aruco/marker2'
    # goal_loc.pose.position.x = 0
    # goal_loc.pose.position.y = 0.4
    # goal_loc.pose.position.z = 0
    # goal_loc.pose.orientation.x = 0
    # goal_loc.pose.orientation.y = 0 
    # goal_loc.pose.orientation.z = 0

    # while not rospy.is_shutdown():
    #         if goal_loc:
    #             publish_cmd(goal_loc)
    #         rate.sleep()

    for i in [0,1]:
        print(i)
        time.sleep(10)

        goal_loc = PoseStamped()
        goal_loc.header.frame_id = 'aruco/marker2'
        goal_loc.pose.position.x = 0
        goal_loc.pose.position.y = 0.4 + i/2
        goal_loc.pose.position.z = 0
        goal_loc.pose.orientation.x = 0
        goal_loc.pose.orientation.y = 0 
        goal_loc.pose.orientation.z = 0

        while not rospy.is_shutdown():
            if goal_loc:
                publish_cmd(goal_loc)
            rate.sleep()
        

if __name__ == '__main__':
    main()