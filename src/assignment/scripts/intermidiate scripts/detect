#!/usr/bin/env python
from __future__ import print_function

import roslib
import sys
import rospy
import cv2
import numpy as np
import time
from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError

class image_converter:

  def __init__(self):
    self.image_pub = rospy.Publisher("/myresult", Image, queue_size=2)

    self.bridge = CvBridge()
    self.image_sub = rospy.Subscriber("/cf1/camera/image_raw", Image, self.callback)

  def callback(self,data):
    # Convert the image from OpenCV to ROS format
    try:
      cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
    except CvBridgeError as e:
      print(e)

    # Convert BGR to HSV
    hsv = cv2.cvtColor(cv_image, cv2.COLOR_BGR2HSV)

    # lower mask (0-10)
    lower_red = np.array([0,50,50])
    upper_red = np.array([10,255,255])
    mask0 = cv2.inRange(hsv, lower_red, upper_red)

    # upper mask (170-180)
    lower_red = np.array([170,50,50])
    upper_red = np.array([180,255,255])
    mask1 = cv2.inRange(hsv, lower_red, upper_red)

    # join my masks
    mask = mask0+mask1

    # or your HSV image, which I *believe* is what you want
    # res = hsv.copy()
    # res[np.where(mask==0)] = 0
    res = cv2.bitwise_and(cv_image, cv_image, mask= mask)
    red_img = self.bridge.cv2_to_imgmsg(res, "bgr8")

    # print(type(cv_image))
    print(sum(sum(sum(res))))
    time.sleep(0.1)

    # # define range of the color we look for in the HSV space
    # lower = np.array([0,0,250])
    # upper = np.array([255,5,255])

    # # Threshold the HSV image to get only the pixels in ranage
    # mask = cv2.inRange(hsv, lower, upper)

    # # Bitwise-AND mask and original image
    # res = cv2.bitwise_and(cv_image, cv_image, mask= mask)

    # Publish the image
    try:
      self.image_pub.publish(self.bridge.cv2_to_imgmsg(res, "bgr8"))
    except CvBridgeError as e:
      print(e)

def main(args):
  rospy.init_node('detect', anonymous=True)

  ic = image_converter()

  print("running...")
  try:
    rospy.spin()
  except KeyboardInterrupt:
    print("Shutting down")

  cv2.destroyAllWindows()

if __name__ == '__main__':
    main(sys.argv)
